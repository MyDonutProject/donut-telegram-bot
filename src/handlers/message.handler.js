// src/handlers/message.handler.js
const Logger = require('../utils/logger');
const WalletService = require('../services/wallet.service');
const SolanaService = require('../services/solana.service');
const ApiService = require('../services/api.service');
const GamificationService = require('../services/gamification.service');
const MainKeyboard = require('../keyboards/main.keyboard');
const WalletKeyboard = require('../keyboards/wallet.keyboard');
const { validators } = require('../utils/validation');
const { formatters } = require('../utils/formatting');

class MessageHandler {
    constructor(bot) {
        this.bot = bot.bot;
        this.botInstance = bot;
        this.db = bot.db;
        
        this.walletService = bot.walletService;
        this.solanaService = bot.solanaService;
        this.apiService = bot.apiService;
        this.gamificationService = bot.gamificationService;
        
        // Handlers injetados
        this.walletOperationsHandler = null;
        this.matrixHandler = null;
        this.voucherHandler = null;
        
        this.logger = new Logger('MessageHandler');
        
        // Mapas internos para gerenciamento de estado
        this.userStates = new Map();
        this.messageIds = new Map();
    }

    /**
     * Injetar WalletOperationsHandler para evitar depend√™ncia circular
     */
    setWalletOperationsHandler(handler) {
        this.walletOperationsHandler = handler;
        this.logger.info('WalletOperationsHandler conectado ao MessageHandler');
    }

    /**
     * Injetar MatrixHandler
     */
    setMatrixHandler(handler) {
        this.matrixHandler = handler;
        this.logger.info('MatrixHandler conectado ao MessageHandler');
    }

    /**
     * Injetar VoucherHandler
     */
    setVoucherHandler(handler) {
        this.voucherHandler = handler;
        this.logger.info('VoucherHandler conectado ao MessageHandler');
    }

    /**
     * Processar mensagens de texto baseado no estado do usu√°rio
     */
    async handleMessage(msg) {
        const telegramId = msg.from.id.toString();
        const text = msg.text?.trim();
        const chatId = msg.chat.id;

        if (!text) return;

        try {
            // CORRE√á√ÉO: Buscar estado tanto do handler local quanto do botInstance
            let userState = this.getUserState(telegramId);
            
            // Se n√£o tem estado local, verificar no botInstance
            if (!userState) {
                const botState = this.botInstance.getUserState(telegramId);
                if (botState && botState.action) {
                    userState = {
                        state: botState.action,
                        data: botState
                    };
                    this.logger.debug(`Estado recuperado do botInstance para ${telegramId}: ${botState.action}`);
                }
            }
            
            this.logger.info(`Mensagem recebida de ${telegramId}: ${text.substring(0, 50)} (estado: ${userState?.state || 'nenhum'})`);

            // Auto-deletar mensagens de PIN ap√≥s 3 segundos
            if (userState?.state && userState.state.includes('pin')) {
                setTimeout(() => {
                    this.bot.deleteMessage(chatId, msg.message_id).catch(() => {});
                }, 3000);
            }

            if (!userState) {
                return await this.handleUnknownMessage(chatId, telegramId, text);
            }

            switch (userState.state) {
                // ========== ESTADOS DE CRIA√á√ÉO DE WALLET ==========
                case 'waiting_pin_for_creation':
                    return await this.processPinForCreation(text, chatId, telegramId, msg.message_id);
                
                case 'waiting_pin_confirmation':
                    return await this.processPinConfirmation(text, chatId, telegramId, userState.data, msg.message_id);
                
                case 'waiting_wallet_name':
                    return await this.processWalletName(text, chatId, telegramId, userState.data);
                
                // ========== ESTADOS DE IMPORTA√á√ÉO VIA SEED ==========
                case 'waiting_seed_for_import':
                    return await this.processSeedForImport(text, chatId, telegramId);
                
                case 'waiting_pin_after_seed':
                    return await this.processPinAfterSeed(text, chatId, telegramId, userState.data, msg.message_id);
                
                case 'waiting_pin_confirmation_after_seed':
                    return await this.processPinConfirmationAfterSeed(text, chatId, telegramId, userState.data, msg.message_id);
                
                // ========== ESTADOS DE IMPORTA√á√ÉO VIA PRIVATE KEY ==========
                case 'waiting_private_key_for_import':
                    return await this.processPrivateKeyForImport(text, chatId, telegramId);
                
                case 'waiting_pin_after_private_key':
                    return await this.processPinAfterPrivateKey(text, chatId, telegramId, userState.data, msg.message_id);
                
                case 'waiting_pin_confirmation_after_key':
                    return await this.processPinConfirmationAfterKey(text, chatId, telegramId, userState.data, msg.message_id);
                
                // ========== ESTADOS DE IMPORTA√á√ÉO (COMPATIBILIDADE) ==========
                case 'waiting_pin_for_import':
                    return await this.processPinForImport(text, chatId, telegramId, userState.data, msg.message_id);
                
                // ========== ESTADOS DE VISUALIZA√á√ÉO ==========
                case 'waiting_pin_for_seed':
                    return await this.processPinToShowSeed(text, chatId, telegramId, msg.message_id);
                
                // ========== ESTADOS DE ALTERA√á√ÉO DE PIN ==========
                case 'waiting_old_pin':
                    return await this.processOldPin(text, chatId, telegramId, msg.message_id);
                
                case 'waiting_new_pin':
                    return await this.processNewPin(text, chatId, telegramId, userState.data, msg.message_id);
                
                case 'waiting_new_pin_confirmation':
                    return await this.processNewPinConfirmation(text, chatId, telegramId, userState.data, msg.message_id);
                
                // ========== ESTADOS DE DELE√á√ÉO ==========
                case 'waiting_delete_confirmation':
                    return await this.processDeleteConfirmation(text, chatId, telegramId);
                
                case 'waiting_pin_for_delete':
                    return await this.processPinForDelete(text, chatId, telegramId, msg.message_id);
                
                // ========== ESTADOS DE ENVIO ==========
                case 'waiting_recipient_address':
                    if (this.walletOperationsHandler) {
                        return await this.walletOperationsHandler.processRecipientAddress(text, chatId, telegramId);
                    }
                    break;
                
                case 'waiting_send_amount':
                    if (this.walletOperationsHandler) {
                        return await this.walletOperationsHandler.processAmountToSend(text, chatId, telegramId);
                    }
                    break;
                
                case 'waiting_pin_for_send':
                    if (this.walletOperationsHandler) {
                        const result = await this.walletOperationsHandler.processPinForSend(text, chatId, telegramId);
                        setTimeout(async () => {
                            try {
                                await this.bot.deleteMessage(chatId, msg.message_id);
                            } catch (e) {}
                        }, 3000);
                        return result;
                    }
                    break;
                
                // ========== NOVOS ESTADOS PARA MATRIZ ==========
                case 'waiting_pin_for_matrix':
                    return await this.processPinForMatrix(text, chatId, telegramId, msg.message_id, userState.data);
                
                // ========== NOVOS ESTADOS PARA VOUCHER ==========
                case 'waiting_voucher_slug':
                    return await this.processVoucherSlug(text, chatId, telegramId);
                
                default:
                    return await this.handleUnknownMessage(chatId, telegramId, text);
            }

        } catch (error) {
            this.logger.error('Erro ao processar mensagem:', error);
            await this.sendErrorMessage(chatId, 'Erro ao processar mensagem. Tente novamente.');
        }
    }

    // ========== PROCESSADORES DE CRIA√á√ÉO DE WALLET ==========

    async processPinForCreation(pin, chatId, telegramId, messageId) {
        pin = pin.trim();

        setTimeout(async () => {
            try {
                await this.bot.deleteMessage(chatId, messageId);
            } catch (e) {}
        }, 3000);

        if (pin.toLowerCase() === 'cancelar' || pin === '/cancel') {
            this.clearUserState(telegramId);
            return await this.sendMessage(chatId, '‚ùå Cria√ß√£o de wallet cancelada.', MainKeyboard.getBackMenu());
        }

        if (!validators.isValidPin(pin)) {
            return await this.sendMessage(chatId, 
                '‚ùå *PIN inv√°lido!*\n\n' +
                'üî¢ O PIN deve ter 4 ou 6 d√≠gitos num√©ricos.\n\n' +
                'üí° Exemplo: 1234 ou 123456\n\n' +
                'Digite novamente:'
            );
        }

        const pinValidation = validators.isStrongPin(pin);
        if (!pinValidation.isStrong) {
            return await this.sendMessage(chatId,
                `‚ùå *PIN fraco!*\n\n${pinValidation.reason}\n\n` +
                'Digite um PIN mais seguro:'
            );
        }

        this.setUserState(telegramId, 'waiting_pin_confirmation', { firstPin: pin });

        return await this.sendMessage(chatId, 
            '‚úÖ *PIN aceito!*\n\n' +
            'üîê *Digite o PIN novamente para confirmar:*\n\n' +
            '‚ö†Ô∏è Certifique-se de que √© o mesmo PIN.'
        );
    }

    async processPinConfirmation(pin, chatId, telegramId, data, messageId) {
        pin = pin.trim();

        setTimeout(async () => {
            try {
                await this.bot.deleteMessage(chatId, messageId);
            } catch (e) {}
        }, 3000);

        if (pin.toLowerCase() === 'cancelar' || pin === '/cancel') {
            this.clearUserState(telegramId);
            return await this.sendMessage(chatId, '‚ùå Cria√ß√£o de wallet cancelada.', MainKeyboard.getBackMenu());
        }

        if (pin !== data.firstPin) {
            this.setUserState(telegramId, 'waiting_pin_for_creation');
            return await this.sendMessage(chatId,
                '‚ùå *Os PINs n√£o conferem!*\n\n' +
                'Por seguran√ßa, vamos come√ßar novamente.\n' +
                'Digite seu novo PIN (4 ou 6 d√≠gitos):'
            );
        }

        // PINs coincidem, pedir nome da wallet
        this.setUserState(telegramId, 'waiting_wallet_name', { pin: data.firstPin });
        
        return await this.sendMessage(chatId, 
            '‚úÖ *PIN confirmado!*\n\n' +
            'üìù *Nome da Wallet*\n\n' +
            'D√™ um nome para sua wallet (ex: Principal, Trading, etc):',
            { parse_mode: 'Markdown' }
        );
    }

    async processWalletName(text, chatId, telegramId, data) {
        if (!data || !data.pin) {
            this.clearUserState(telegramId);
            return await this.sendMessage(chatId, '‚ùå Erro no processo. Tente novamente com /start');
        }

        const walletName = text.substring(0, 30); // Limitar tamanho

        try {
            await this.sendMessage(chatId, 'üîÑ Criando sua wallet...');

            const result = await this.walletService.createWallet(telegramId, data.pin, walletName);
            
            if (!result.success) {
                this.clearUserState(telegramId);
                return await this.sendErrorMessage(chatId, result.error);
            }

            this.clearUserState(telegramId);

            // Formatar seed phrase numerada
            const seedWords = result.seedPhrase.split(' ');
            const seedFormatted = seedWords.map((word, i) => 
                `${i + 1}. ${word}`
            ).join('\n');

            let message = '‚úÖ *Wallet Criada com Sucesso!*\n\n';
            message += `üîë *Seu endere√ßo:*\n\`${result.publicKey}\`\n\n`;
            message += 'üå± *SEED PHRASE - ANOTE AGORA:*\n';
            message += '```\n' + seedFormatted + '\n```\n';
            message += '‚ö†Ô∏è *IMPORTANTE:*\n';
            message += '‚Ä¢ Anote estas palavras em ordem\n';
            message += '‚Ä¢ Guarde em local seguro\n';
            message += '‚Ä¢ Nunca compartilhe com ningu√©m\n';
            message += '‚Ä¢ Voc√™ s√≥ ver√° isso UMA VEZ!\n\n';
            message += '‚úÖ PIN configurado com sucesso!';

            await this.gamificationService.completeTask(telegramId, 'create_wallet', {
                walletCreated: true,
                publicKey: result.publicKey,
                timestamp: Date.now()
            });

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚úÖ Anotei a Seed Phrase', callback_data: 'confirm_seed_saved' }
                    ],
                    [
                        { text: 'üí∞ Ver Saldo', callback_data: 'view_balance' }
                    ],
                    [
                        { text: 'üìã Pr√≥xima Tarefa', callback_data: 'show_progress' }
                    ]
                ]
            };

            const sentMsg = await this.sendMessage(chatId, message, keyboard);
            
            // Auto-deletar ap√≥s 2 minutos
            setTimeout(() => {
                this.bot.deleteMessage(chatId, sentMsg.message_id).catch(() => {});
            }, 120000);

            return sentMsg;

        } catch (error) {
            this.logger.error('Erro ao criar wallet:', error);
            this.clearUserState(telegramId);
            return await this.sendErrorMessage(chatId, 'Erro ao criar wallet. Tente novamente.');
        }
    }

    // ========== PROCESSADORES DE IMPORTA√á√ÉO VIA SEED ==========

    async processSeedForImport(seedPhrase, chatId, telegramId) {
        seedPhrase = seedPhrase.trim().toLowerCase();

        if (seedPhrase === '/cancel' || seedPhrase === 'cancelar') {
            this.clearUserState(telegramId);
            return await this.sendMessage(chatId, 
                '‚ùå Importa√ß√£o cancelada.',
                {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è Voltar ao Menu', callback_data: 'task_create_wallet' }]
                    ]
                }
            );
        }

        if (!validators.isValidSeedPhrase(seedPhrase)) {
            return await this.sendMessage(chatId,
                '‚ùå *Seed phrase inv√°lida!*\n\n' +
                'üîë A seed phrase deve ter 12 ou 24 palavras v√°lidas.\n\n' +
                'üí° Exemplo:\n' +
                '`word1 word2 word3 ... word12`\n\n' +
                'Digite novamente ou /cancel para cancelar:',
                {
                    inline_keyboard: [
                        [{ text: '‚ùå Cancelar', callback_data: 'cancel_import' }]
                    ]
                }
            );
        }

        // Auto-deletar mensagem com seed
        const msg = await this.sendMessage(chatId, 'üîí Mensagem com seed ser√° deletada por seguran√ßa...');
        setTimeout(() => {
            this.bot.deleteMessage(chatId, msg.message_id - 1).catch(() => {});
            this.bot.deleteMessage(chatId, msg.message_id).catch(() => {});
        }, 3000);

        this.setUserState(telegramId, 'waiting_pin_after_seed', { seedPhrase });

        let message = '‚úÖ *Seed phrase v√°lida!*\n\n';
        message += 'üîê Agora defina um PIN de seguran√ßa.\n';
        message += 'Digite um PIN de 4 ou 6 d√≠gitos:\n\n';
        message += '‚ö†Ô∏è Este PIN proteger√° sua wallet no bot.';

        return await this.sendMessage(chatId, message);
    }

    async processPinAfterSeed(pin, chatId, telegramId, data, messageId) {
        pin = pin.trim();

        setTimeout(async () => {
            try {
                await this.bot.deleteMessage(chatId, messageId);
            } catch (e) {}
        }, 3000);

        const { seedPhrase } = data;

        if (!validators.isValidPin(pin)) {
            return await this.sendMessage(chatId, 
                '‚ùå *PIN inv√°lido!*\n\n' +
                'üî¢ O PIN deve ter 4 ou 6 d√≠gitos num√©ricos.\n\n' +
                'Digite novamente:'
            );
        }

        const pinValidation = validators.isStrongPin(pin);
        if (!pinValidation.isStrong) {
            return await this.sendMessage(chatId,
                `‚ùå *PIN fraco!*\n\n${pinValidation.reason}\n\n` +
                'Digite um PIN mais seguro:'
            );
        }

        this.setUserState(telegramId, 'waiting_pin_confirmation_after_seed', { seedPhrase, firstPin: pin });

        return await this.sendMessage(chatId, 
            '‚úÖ *PIN aceito!*\n\n' +
            'üîê *Digite o PIN novamente para confirmar:*\n\n' +
            '‚ö†Ô∏è Certifique-se de que √© o mesmo PIN.'
        );
    }

    async processPinConfirmationAfterSeed(pin, chatId, telegramId, data, messageId) {
        pin = pin.trim();

        setTimeout(async () => {
            try {
                await this.bot.deleteMessage(chatId, messageId);
            } catch (e) {}
        }, 3000);

        const { seedPhrase, firstPin } = data;

        if (pin !== firstPin) {
            this.setUserState(telegramId, 'waiting_pin_after_seed', { seedPhrase });
            return await this.sendMessage(chatId,
                '‚ùå *Os PINs n√£o conferem!*\n\n' +
                'Por seguran√ßa, vamos come√ßar novamente.\n' +
                'Digite seu novo PIN (4 ou 6 d√≠gitos):'
            );
        }

        try {
            await this.sendMessage(chatId, 'üîÑ Importando sua wallet...');

            const result = await this.walletService.importWallet(telegramId, seedPhrase, pin);
            
            if (!result.success) {
                this.clearUserState(telegramId);
                return await this.sendErrorMessage(chatId, result.error);
            }

            this.clearUserState(telegramId);

            // Verificar saldo ap√≥s importa√ß√£o
            const simplifiedFlow = this.botInstance.simplifiedFlowHandler;
            if (simplifiedFlow) {
                await simplifiedFlow.handleWalletImported(chatId, telegramId, result);
            }

            let message = '‚úÖ *Wallet Importada com Sucesso!*\n\n';
            message += `üîë *Seu endere√ßo:*\n\`${result.publicKey}\`\n\n`;
            message += `üè∑Ô∏è *Nome:* ${result.walletName}\n`;
            message += 'üîê *PIN:* Configurado com sucesso\n\n';
            
            if (result.restoredProgress) {
                message += '‚ôªÔ∏è *Progresso anterior restaurado!*\n\n';
            }
            
            message += '‚ú® Sua wallet est√° pronta para uso!';

            await this.gamificationService.completeTask(telegramId, 'create_wallet', {
                walletCreated: true,
                imported: true,
                publicKey: result.publicKey,
                timestamp: Date.now()
            });

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üí∞ Ver Saldo', callback_data: 'view_balance' }
                    ],
                    [
                        { text: 'üìã Pr√≥xima Tarefa', callback_data: 'show_progress' }
                    ],
                    [
                        { text: '‚¨ÖÔ∏è Menu Principal', callback_data: 'main_menu' }
                    ]
                ]
            };

            return await this.sendMessage(chatId, message, keyboard);

        } catch (error) {
            this.logger.error('Erro ao importar wallet:', error);
            this.clearUserState(telegramId);
            return await this.sendErrorMessage(chatId, 'Erro ao importar wallet.');
        }
    }

    // ========== PROCESSADORES DE IMPORTA√á√ÉO VIA PRIVATE KEY ==========

    async processPrivateKeyForImport(privateKey, chatId, telegramId) {
        privateKey = privateKey.trim();

        if (privateKey.toLowerCase() === '/cancel' || privateKey.toLowerCase() === 'cancelar') {
            this.clearUserState(telegramId);
            return await this.sendMessage(chatId, 
                '‚ùå Importa√ß√£o cancelada.',
                {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è Voltar ao Menu', callback_data: 'import_wallet' }]
                    ]
                }
            );
        }

        if (!validators.isValidPrivateKey(privateKey)) {
            return await this.sendMessage(chatId,
                '‚ùå *Private key inv√°lida!*\n\n' +
                'üîê Formatos aceitos:\n' +
                '‚Ä¢ Base58 (Phantom/Solflare): ~88 caracteres\n' +
                '‚Ä¢ Array: [1,2,3,...] com 64 n√∫meros\n' +
                '‚Ä¢ Base64 ou Hex\n\n' +
                'üí° Copie diretamente do seu wallet.\n\n' +
                'Digite novamente ou /cancel para cancelar:',
                {
                    inline_keyboard: [
                        [{ text: '‚ùå Cancelar', callback_data: 'import_wallet' }]
                    ]
                }
            );
        }

        // Auto-deletar mensagem com private key
        const msg = await this.sendMessage(chatId, 'üîí Mensagem com private key ser√° deletada por seguran√ßa...');
        setTimeout(() => {
            this.bot.deleteMessage(chatId, msg.message_id - 1).catch(() => {});
            this.bot.deleteMessage(chatId, msg.message_id).catch(() => {});
        }, 3000);

        this.setUserState(telegramId, 'waiting_pin_after_private_key', { privateKey });

        let message = '‚úÖ *Private key v√°lida!*\n\n';
        message += 'üîê Agora defina um PIN de seguran√ßa.\n';
        message += 'Digite um PIN de 4 ou 6 d√≠gitos:\n\n';
        message += '‚ö†Ô∏è Este PIN proteger√° sua wallet no bot.';

        return await this.sendMessage(chatId, message);
    }

    async processPinAfterPrivateKey(pin, chatId, telegramId, data, messageId) {
        pin = pin.trim();

        setTimeout(async () => {
            try {
                await this.bot.deleteMessage(chatId, messageId);
            } catch (e) {}
        }, 3000);

        const { privateKey } = data;

        if (!validators.isValidPin(pin)) {
            return await this.sendMessage(chatId, 
                '‚ùå *PIN inv√°lido!*\n\n' +
                'üî¢ O PIN deve ter 4 ou 6 d√≠gitos num√©ricos.\n\n' +
                'Digite novamente:'
            );
        }

        const pinValidation = validators.isStrongPin(pin);
        if (!pinValidation.isStrong) {
            return await this.sendMessage(chatId,
                `‚ùå *PIN fraco!*\n\n${pinValidation.reason}\n\n` +
                'Digite um PIN mais seguro:'
            );
        }

        this.setUserState(telegramId, 'waiting_pin_confirmation_after_key', { privateKey, firstPin: pin });

        return await this.sendMessage(chatId, 
            '‚úÖ *PIN aceito!*\n\n' +
            'üîê *Digite o PIN novamente para confirmar:*\n\n' +
            '‚ö†Ô∏è Certifique-se de que √© o mesmo PIN.'
        );
    }

    async processPinConfirmationAfterKey(pin, chatId, telegramId, data, messageId) {
        pin = pin.trim();

        setTimeout(async () => {
            try {
                await this.bot.deleteMessage(chatId, messageId);
            } catch (e) {}
        }, 3000);

        const { privateKey, firstPin } = data;

        if (pin !== firstPin) {
            this.setUserState(telegramId, 'waiting_pin_after_private_key', { privateKey });
            return await this.sendMessage(chatId,
                '‚ùå *Os PINs n√£o conferem!*\n\n' +
                'Por seguran√ßa, vamos come√ßar novamente.\n' +
                'Digite seu novo PIN (4 ou 6 d√≠gitos):'
            );
        }

        try {
            await this.sendMessage(chatId, 'üîÑ Importando sua wallet...');

            const result = await this.walletService.importWalletFromPrivateKey(
                telegramId, 
                privateKey, 
                pin
            );
            
            if (!result.success) {
                this.clearUserState(telegramId);
                return await this.sendErrorMessage(chatId, result.error);
            }

            this.clearUserState(telegramId);

            const simplifiedFlow = this.botInstance.simplifiedFlowHandler;
            if (simplifiedFlow) {
                await simplifiedFlow.handleWalletImported(chatId, telegramId, result);
            }

            let message = '‚úÖ *Wallet Importada com Sucesso!*\n\n';
            message += `üîë *Seu endere√ßo:*\n\`${result.publicKey}\`\n\n`;
            message += `üè∑Ô∏è *Nome:* ${result.walletName}\n`;
            message += 'üîê *PIN:* Configurado com sucesso\n\n';
            message += '‚ö†Ô∏è *Nota:* Esta wallet n√£o tem seed phrase\n';
            message += 'Foi importada apenas com private key.\n\n';
            message += '‚ú® Sua wallet est√° pronta para uso!';

            await this.gamificationService.completeTask(telegramId, 'create_wallet', {
                walletCreated: true,
                imported: true,
                fromPrivateKey: true,
                publicKey: result.publicKey,
                timestamp: Date.now()
            });

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üí∞ Ver Saldo', callback_data: 'view_balance' }
                    ],
                    [
                        { text: 'üìã Pr√≥xima Tarefa', callback_data: 'show_progress' }
                    ],
                    [
                        { text: '‚¨ÖÔ∏è Menu Principal', callback_data: 'main_menu' }
                    ]
                ]
            };

            return await this.sendMessage(chatId, message, keyboard);

        } catch (error) {
            this.logger.error('Erro ao importar wallet via private key:', error);
            this.clearUserState(telegramId);
            return await this.sendErrorMessage(chatId, 'Erro ao importar wallet.');
        }
    }

    // ========== PROCESSADOR DE IMPORTA√á√ÉO PARA COMPATIBILIDADE ==========

    async processPinForImport(text, chatId, telegramId, state, messageId) {
        // Este m√©todo existe para compatibilidade com o c√≥digo antigo
        // Redireciona para os m√©todos corretos baseado no que est√° sendo importado
        
        if (!state || (!state.seedPhrase && !state.privateKey)) {
            this.clearUserState(telegramId);
            await this.sendMessage(chatId, '‚ùå Erro no processo. Tente novamente.');
            return;
        }

        // Se tem seedPhrase, redireciona para o fluxo de seed
        if (state.seedPhrase) {
            return await this.processPinAfterSeed(text, chatId, telegramId, state, messageId);
        }
        
        // Se tem privateKey, redireciona para o fluxo de private key
        if (state.privateKey) {
            return await this.processPinAfterPrivateKey(text, chatId, telegramId, state, messageId);
        }
    }

    // ========== PROCESSADORES DE VISUALIZA√á√ÉO ==========

    async processPinToShowSeed(pin, chatId, telegramId, messageId) {
        pin = pin.trim();

        setTimeout(async () => {
            try {
                await this.bot.deleteMessage(chatId, messageId);
            } catch (e) {}
        }, 3000);

        try {
            const result = await this.walletService.getSeedPhrase(telegramId, pin);
            
            if (!result.success) {
                if (result.error === 'PIN incorreto') {
                    return await this.sendMessage(chatId,
                        '‚ùå *PIN incorreto!*\n\n' +
                        'Digite novamente ou use /cancel para cancelar:'
                    );
                }
                
                this.clearUserState(telegramId);
                return await this.sendErrorMessage(chatId, result.error);
            }

            this.clearUserState(telegramId);

            const seedWords = result.seedPhrase.split(' ');
            const seedFormatted = seedWords.map((word, i) => 
                `${i + 1}. ${word}`
            ).join('\n');

            let message = 'üîë *Sua Seed Phrase*\n\n';
            message += '```\n' + seedFormatted + '\n```\n';
            message += '‚ö†Ô∏è *SEGURAN√áA:*\n';
            message += '‚Ä¢ Nunca compartilhe estas palavras\n';
            message += '‚Ä¢ Anote em papel e guarde offline\n';
            message += '‚Ä¢ Com elas, qualquer pessoa controla sua wallet\n\n';
            message += 'üîí Esta mensagem ser√° apagada em 30 segundos.';

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚¨ÖÔ∏è Voltar', callback_data: 'manage_wallet' }
                    ]
                ]
            };

            const sentMessage = await this.sendMessage(chatId, message, keyboard);

            setTimeout(async () => {
                try {
                    await this.bot.deleteMessage(chatId, sentMessage.message_id);
                    await this.sendMessage(chatId, 
                        '‚úÖ Seed phrase apagada por seguran√ßa.',
                        WalletKeyboard.getBackMenu()
                    );
                } catch (e) {}
            }, 30000);

            return sentMessage;

        } catch (error) {
            this.logger.error('Erro ao mostrar seed phrase:', error);
            this.clearUserState(telegramId);
            return await this.sendErrorMessage(chatId, 'Erro ao acessar seed phrase.');
        }
    }

    // ========== PROCESSADORES DE ALTERA√á√ÉO DE PIN ==========

    async processOldPin(oldPin, chatId, telegramId, messageId) {
        oldPin = oldPin.trim();

        setTimeout(async () => {
            try {
                await this.bot.deleteMessage(chatId, messageId);
            } catch (e) {}
        }, 3000);

        try {
            const isValid = await this.walletService.verifyPIN(telegramId, oldPin);
            
            if (!isValid) {
                return await this.sendMessage(chatId,
                    '‚ùå *PIN incorreto!*\n\n' +
                    'Digite seu PIN atual novamente:'
                );
            }

            this.setUserState(telegramId, 'waiting_new_pin', { oldPin });

            let message = '‚úÖ *PIN atual confirmado!*\n\n';
            message += 'üîê *Passo 2: Novo PIN*\n';
            message += 'Digite seu novo PIN (4 ou 6 d√≠gitos):\n\n';
            message += 'üí° Use um PIN diferente do atual.';

            return await this.sendMessage(chatId, message);

        } catch (error) {
            this.logger.error('Erro ao verificar PIN antigo:', error);
            return await this.sendMessage(chatId, 
                '‚ùå Erro ao verificar PIN. Tente novamente.'
            );
        }
    }

    async processNewPin(newPin, chatId, telegramId, data, messageId) {
        newPin = newPin.trim();

        setTimeout(async () => {
            try {
                await this.bot.deleteMessage(chatId, messageId);
            } catch (e) {}
        }, 3000);

        const { oldPin } = data;

        if (!validators.isValidPin(newPin)) {
            return await this.sendMessage(chatId, 
                '‚ùå *PIN inv√°lido!*\n\n' +
                'üî¢ O PIN deve ter 4 ou 6 d√≠gitos num√©ricos.\n\n' +
                'Digite novamente:'
            );
        }

        if (newPin === oldPin) {
            return await this.sendMessage(chatId,
                '‚ùå *O novo PIN deve ser diferente do atual!*\n\n' +
                'Digite um PIN diferente:'
            );
        }

        const pinValidation = validators.isStrongPin(newPin);
        if (!pinValidation.isStrong) {
            return await this.sendMessage(chatId,
                `‚ùå *PIN fraco!*\n\n${pinValidation.reason}\n\n` +
                'Digite um PIN mais seguro:'
            );
        }

        this.setUserState(telegramId, 'waiting_new_pin_confirmation', { oldPin, newPin });

        return await this.sendMessage(chatId, 
            '‚úÖ *Novo PIN aceito!*\n\n' +
            'üîê *Digite o novo PIN novamente para confirmar:*\n\n' +
            '‚ö†Ô∏è Certifique-se de que √© o mesmo PIN.'
        );
    }

    async processNewPinConfirmation(pin, chatId, telegramId, data, messageId) {
        pin = pin.trim();

        setTimeout(async () => {
            try {
                await this.bot.deleteMessage(chatId, messageId);
            } catch (e) {}
        }, 3000);

        const { oldPin, newPin } = data;

        if (pin !== newPin) {
            this.setUserState(telegramId, 'waiting_new_pin', { oldPin });
            return await this.sendMessage(chatId,
                '‚ùå *Os PINs n√£o conferem!*\n\n' +
                'Por seguran√ßa, vamos come√ßar novamente.\n' +
                'Digite seu novo PIN (4 ou 6 d√≠gitos):'
            );
        }

        try {
            await this.sendMessage(chatId, 'üîÑ Alterando PIN...');

            const result = await this.walletService.changePIN(telegramId, oldPin, newPin);
            
            if (!result.success) {
                this.clearUserState(telegramId);
                return await this.sendErrorMessage(chatId, result.error);
            }

            this.clearUserState(telegramId);

            let message = '‚úÖ *PIN Alterado com Sucesso!*\n\n';
            message += 'üîê Seu novo PIN est√° ativo.\n';
            message += 'üìù Lembre-se de usar o novo PIN para:\n';
            message += '‚Ä¢ Ver seed phrase\n';
            message += '‚Ä¢ Confirmar transa√ß√µes\n';
            message += '‚Ä¢ Alterar configura√ß√µes\n\n';
            message += '‚ö†Ô∏è Guarde seu novo PIN com seguran√ßa!';

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚¨ÖÔ∏è Voltar √†s Configura√ß√µes', callback_data: 'wallet_settings' }
                    ],
                    [
                        { text: 'üè† Menu Principal', callback_data: 'main_menu' }
                    ]
                ]
            };

            return await this.sendMessage(chatId, message, keyboard);

        } catch (error) {
            this.logger.error('Erro ao alterar PIN:', error);
            this.clearUserState(telegramId);
            return await this.sendErrorMessage(chatId, 'Erro ao alterar PIN.');
        }
    }

    // ========== PROCESSADORES DE DELE√á√ÉO ==========

    async processDeleteConfirmation(text, chatId, telegramId) {
        text = text.trim();

        if (text !== 'DELETAR') {
            return await this.sendMessage(chatId,
                '‚ùå *Confirma√ß√£o incorreta!*\n\n' +
                'Digite exatamente DELETAR (em mai√∫sculas) para confirmar\n' +
                'ou /cancel para cancelar:'
            );
        }

        this.setUserState(telegramId, 'waiting_pin_for_delete');

        return await this.sendMessage(chatId,
            '‚ö†Ô∏è *√öltima confirma√ß√£o!*\n\n' +
            'üîê Digite seu PIN para confirmar a exclus√£o:\n\n' +
            '‚ö†Ô∏è Esta a√ß√£o √© IRREVERS√çVEL!'
        );
    }

    async processPinForDelete(pin, chatId, telegramId, messageId) {
        pin = pin.trim();

        setTimeout(async () => {
            try {
                await this.bot.deleteMessage(chatId, messageId);
            } catch (e) {}
        }, 3000);

        try {
            const result = await this.walletService.deleteWallet(telegramId, pin);
            
            if (!result.success) {
                if (result.error === 'PIN incorreto') {
                    return await this.sendMessage(chatId,
                        '‚ùå *PIN incorreto!*\n\n' +
                        'Digite novamente ou use /cancel para cancelar:'
                    );
                }
                
                this.clearUserState(telegramId);
                return await this.sendErrorMessage(chatId, result.error);
            }

            this.clearUserState(telegramId);

            let message = '‚úÖ *Wallet Deletada com Sucesso!*\n\n';
            message += 'üóëÔ∏è Todos os dados foram removidos.\n';
            message += 'üîÑ Suas tarefas foram resetadas.\n\n';
            
            if (result.backupSaved) {
                message += 'üíæ *Backup salvo!*\n';
                message += 'Se reimportar a mesma wallet, poder√° recuperar o progresso.\n\n';
            }
            
            message += 'Voc√™ pode criar ou importar uma nova wallet quando quiser.';

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üÜï Criar Nova Wallet', callback_data: 'create_new_wallet' }
                    ],
                    [
                        { text: 'üì• Importar Wallet', callback_data: 'import_wallet_menu' }
                    ],
                    [
                        { text: 'üè† Menu Principal', callback_data: 'main_menu' }
                    ]
                ]
            };

            return await this.sendMessage(chatId, message, keyboard);

        } catch (error) {
            this.logger.error('Erro ao deletar wallet:', error);
            this.clearUserState(telegramId);
            return await this.sendErrorMessage(chatId, 'Erro ao deletar wallet.');
        }
    }

    // ========== PROCESSADORES PARA MATRIZ ==========

    async processPinForMatrix(text, chatId, telegramId, messageId, stateData) {
        // Auto-deletar PIN ap√≥s 3 segundos
        setTimeout(async () => {
            try {
                await this.bot.deleteMessage(chatId, messageId);
            } catch (e) {}
        }, 3000);
        
        // Verificar se √© cancelamento
        if (text.toLowerCase() === 'cancelar' || text === '/cancel') {
            this.clearUserState(telegramId);
            await this.sendMessage(chatId, '‚ùå Cria√ß√£o de matriz cancelada.', {
                inline_keyboard: [
                    [{ text: 'üîÑ Tentar Novamente', callback_data: 'task_create_matrix' }],
                    [{ text: '‚¨ÖÔ∏è Menu Principal', callback_data: 'main_menu' }]
                ]
            });
            return;
        }
        
        // Verificar PIN
        const isValid = await this.walletService.verifyPIN(telegramId, text);
        
        if (!isValid) {
            await this.sendMessage(chatId, '‚ùå PIN incorreto! Tente novamente:');
            return;
        }

        // PIN v√°lido, limpar estado
        this.clearUserState(telegramId);
        
        this.logger.info(`PIN validado para cria√ß√£o de matriz do usu√°rio ${telegramId}`);
        
        // IMPORTANTE: Chamar o matrixHandler para processar a cria√ß√£o
        if (this.matrixHandler) {
            // Usar o messageId do stateData se dispon√≠vel
            const targetMessageId = stateData?.messageId || messageId;
            
            this.logger.info(`Iniciando processamento da matriz - messageId: ${targetMessageId}`);
            
            // Chamar o processMatrixCreation com o PIN validado
            await this.matrixHandler.processMatrixCreation(chatId, telegramId, text, targetMessageId);
        } else {
            this.logger.error('MatrixHandler n√£o est√° definido!');
            await this.sendMessage(chatId, '‚ùå Erro interno. Por favor, tente novamente.');
        }
    }

    // ========== NOVOS PROCESSADORES PARA VOUCHER ==========

    async processVoucherSlug(text, chatId, telegramId) {
        const state = this.getUserStateData(telegramId);
        
        // Limpar slug
        const slug = text.toLowerCase().replace(/[^a-z0-9_]/g, '');
        
        // Validar comprimento
        if (slug.length < 3 || slug.length > 20) {
            return await this.sendMessage(chatId, 
                '‚ùå *Nome inv√°lido!*\n\n' +
                'Deve ter entre 3 e 20 caracteres.\n' +
                'Use apenas letras, n√∫meros e _\n\n' +
                'Tente novamente:'
            );
        }

        // Criar voucher
        this.clearUserState(telegramId);
        
        if (this.voucherHandler && state && state.messageId) {
            await this.voucherHandler.processVoucherCreation(chatId, telegramId, slug, state.messageId);
        } else {
            await this.sendMessage(chatId, '‚ùå Erro ao processar. Tente novamente.');
        }
    }

    // ========== PROCESSADOR DE MENSAGENS DESCONHECIDAS ==========

    async handleUnknownMessage(chatId, telegramId, text) {
        if (text.startsWith('/')) {
            return await this.sendMessage(chatId, 
                '‚ùì Comando n√£o reconhecido.\n\n' +
                'Use /start para ver o menu principal.',
                MainKeyboard.getBackMenu('main_menu')
            );
        }

        return await this.sendMessage(chatId,
            'üëã Ol√°! Use os bot√µes do menu para navegar.\n\n' +
            'Se precisar recome√ßar, use /start',
            MainKeyboard.getBackMenu('main_menu')
        );
    }

    // ========== HELPERS DE ESTADO ==========

    getUserState(telegramId) {
        // Primeiro verificar estado local
        const localState = this.userStates.get(telegramId);
        if (localState) {
            this.logger.debug(`Estado local encontrado para ${telegramId}:`, localState);
            return localState;
        }
        
        // Se n√£o tem local, verificar no botInstance
        const botState = this.botInstance.getUserState(telegramId);
        if (botState && botState.action) {
            this.logger.debug(`Estado do bot encontrado para ${telegramId}:`, botState);
            return {
                state: botState.action,
                data: botState
            };
        }
        
        return null;
    }

    getUserStateData(telegramId) {
        // Retorna os dados do estado do botInstance tamb√©m
        const localState = this.userStates.get(telegramId);
        const botState = this.botInstance.getUserState(telegramId);
        
        // Combina os dois estados
        if (localState && botState) {
            return { ...botState, ...localState.data };
        }
        return localState?.data || botState || null;
    }

    setUserState(telegramId, state, data = {}) {
        this.userStates.set(telegramId, { 
            state, 
            data, 
            timestamp: Date.now() 
        });
        this.logger.info(`Estado configurado para ${telegramId}: ${state}`);
        
        // Tamb√©m salva no botInstance para compatibilidade
        this.botInstance.setUserState(telegramId, { action: state, ...data });
    }

    clearUserState(telegramId) {
        this.userStates.delete(telegramId);
        this.botInstance.clearUserState(telegramId);
        this.logger.info(`Estado limpo para ${telegramId}`);
    }

    // ========== HELPERS DE MENSAGEM ==========

    async sendMessage(chatId, text, keyboard = null) {
        const options = { parse_mode: 'Markdown' };
        if (keyboard) options.reply_markup = keyboard;
        
        try {
            return await this.bot.sendMessage(chatId, text, options);
        } catch (error) {
            // Fallback se markdown falhar
            return await this.bot.sendMessage(chatId, text.replace(/[*_`]/g, ''), { reply_markup: keyboard });
        }
    }

    async sendErrorMessage(chatId, errorText) {
        const message = `‚ùå **Erro**\n\n${errorText}`;
        return await this.sendMessage(chatId, message, MainKeyboard.getBackMenu());
    }
}

module.exports = MessageHandler;